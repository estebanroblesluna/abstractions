<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Lifia</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="shortcut icon" href="../../imagenes/lifiaicon.ico" >
<style type="text/css">
<!--
@import url("../estilos_lifia.css");
body {
	background-color: #bec2d1;
	margin-left: 0px;
	margin-top: 5px;
	margin-right: 0px;
	margin-bottom: 0px;
	background-image: url();
}
a:link {
	color: #255282;
	text-decoration: none;
}
a:visited {
	text-decoration: none;
	color: #255282;
}
a:hover {
	text-decoration: none;
	color: #FF9933;
}
a:active {
	text-decoration: none;
	color: #FF9933;
}
.Estilo4 {color: #666666}
.Estilo8 {color: #1EA173}
.Estilo9 {color: #333399}

.centro{FONT-SIZE: 13px; COLOR: #666666; font-weight:bold;FONT-FAMILY: "Trebuchet MS", Verdana;
text-align:center;}
.linkTexto {
		COLOR: #0033CC; 	text-decoration:underline;
		font-weight:bold;}
-->
</style>
</head>

<body>
<table width="830" border="0" align="center" cellpadding="0" cellspacing="0" background="../imagenes/line_830.gif">
  <!--DWLayoutTable-->
  <tr>
    <td width="30" rowspan="8" valign="top"><img src="../imagenes/spacer_izq2.gif" width="30" height="615"></td>
    <td colspan="4" valign="top"><table width="780" height="114" border="0" cellpadding="0" cellspacing="0">
        <!--DWLayoutTable-->
        <tr>
          <td width="780" height="170" valign="top"><img src="../imagenes/top_difusion.gif" width="780" height="172" border="0" usemap="#Map"></td>
        </tr>
    </table></td>
  <td width="20" rowspan="8" valign="top"><img src="../imagenes/spacer_der2.gif" width="20" height="485"></td>
  </tr>
  <tr>
    <td width="247" rowspan="5" valign="top"><table width="247" border="0" cellpadding="0" cellspacing="0">
        <!--DWLayoutTable-->
        <tr>
          <td height="19" colspan="3" valign="top"><img src="../imagenes/spacer_vert_19.gif" width="10" height="19"></td>
        </tr>
        <tr>
          <td width="41" rowspan="7" valign="top"><!--DWLayoutEmptyCell-->&nbsp;</td>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../index.htm" target="_self">Bienvenida</a></td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../about_us.htm" target="_self">Sobre nosotros</a> </td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../research.htm">Investigaci&oacute;n</a> </td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap><span class="menu_izq"> <a href="../publications.htm" target="_self">Publicaciones </a></span> &#13;</td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../technology.htm" target="_self">Transferencia de tec. &amp; servicios </a>&#13;</td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" class="menu_izq"><span class="menu_izq Estilo8"> <a href="../capabilities.htm">Capacidades &#13;</a><strong> <a href="capabilities.htm">&#13;&#13;</a></strong></span> &#13;</td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top"><a href="../difusion.htm" class="menu_izq"><strong>Difusi&oacute;n</strong></a></td>
        </tr>
        <tr>
          <td height="57">&nbsp;</td>
          <td width="84">&nbsp;</td>
          <td width="122">&nbsp;</td>
        </tr>
        <tr>
          <td height="84" colspan="3" valign="top"><img src="../imagenes/spacer_vert_84.gif" width="10" height="84"></td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita Estilo4"><a href="../sitemap.htm" target="_self">mapa del sitio</a> </div></td>
              <td rowspan="5" valign="top"><!--DWLayoutEmptyCell-->&nbsp;</td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita"><a href="../staff.htm" target="_self">staff</a></div></td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita Estilo4"><a href="../contact.htm" target="_self">contacto</a></div></td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita Estilo4"><a href="../../en/index.htm" target="_self">english version</a> </div></td>
        </tr>
        <tr>
          <td height="16"></td>
          <td></td>
        </tr>
		        <tr>
		          <td>&nbsp;</td>
                  <td>&nbsp;</td>
                  <td>&nbsp;</td>
        </tr>
		
                </table></td>
    <td width="40"></td>
    <td valign="top"><!--DWLayoutEmptyCell-->&nbsp;</td>
        <td width="107"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td valign="top" class="titulo_principal_cap Estilo9">Hibernate cache</td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td valign="top" class="titulo_secundario"> (por  Santiago Urrizola) -  24/Octubre/2007 - <a href="20071024.htm"><strong>Permalink</strong></a> </td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td valign="top" class="parrafo_normal">&nbsp;&nbsp;&nbsp;&nbsp;
      La arquitectura de cach&eacute; de Hibernate es muy potente: ofrece dos niveles de cach&eacute; orientados a tareas muy diferentes.De estos, s&oacute;lo el primero de ellos es obligatorio. Por si fuese poco, Hibernate incluye una cach&eacute; de consultas que nos da la posibilidad de obtener r&aacute;pidamente resultados que ya hab&iacute;an sido consultados previamente. <br>
      <br>
     <p class="centro"><img src="20071024/imagen1.png"> </p> 
     
     &nbsp;&nbsp;&nbsp;&nbsp; Una cach&eacute; es un mecanismo que nos permite en muchas ocasiones aumentar el rendimiento de nuestras aplicaciones. Al almacenar nuestras estructuras de objetos en memoria, nos evita volver a buscar dichos objetos en base de datos. Pero cualquier cach&eacute; tiene asociados una serie de problemas que afloran especialmente al aumentar la concurrencia de las aplicaciones. Estos problemas, pueden llegar incluso a hacer que la cach&eacute; se vuelva en nuestra contra, y que el rendimiento de las aplicaciones decrezca en forma alarmante. Consideremos un t&iacute;pico caso de uso de un cache: <br>
      - El sistema intenta recuperar una instancia de un objeto<br>
      - Si el objeto est&aacute; en la cach&eacute; se retorna directamente. <br>
      - Si el objeto no est&aacute; en la cach&eacute;, se recupera y se almacena en la cach&eacute;. <br>
   &nbsp;&nbsp;&nbsp;&nbsp;   De esto surgen algunos problemas t&iacute;picos:<br> 
   &iquest;Qu&eacute; pasa si un objeto que fue recuperado por un hilo de ejecuci&oacute;n y guardado en el cache, es recuperado tambi&eacute;n por otro hilo de ejecuci&oacute;n y modificado?<br>
   <br>
&nbsp;&nbsp;&nbsp;&nbsp;Este problema es bastante com&uacute;n en todas las aplicaciones, tanto que en muchos lugares se recomienda el uso de cache para objetos de solo lectura (lo cual es parcialemente correcto). <br><br>

&nbsp;&nbsp;&nbsp;&nbsp;      Este problema en realidad se presenta de varias formas:<br>
&nbsp;&nbsp;&nbsp;&nbsp;      1) Dos hilos utilizan el mismo cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;      2) Dos hilos utilizan distintos caches (por ejemplo una arquitectura distribuida, o un cluster)<br>
&nbsp;&nbsp;&nbsp;&nbsp;      3) Se modifica un objeto por una aplicaci&oacute;n que no accede al cache (ejemplo cuando se modifica un registro en la tabla a la que esta mapeada un objeto).<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;      Para el primer caso no tendr&iacute;amos demasiados problemas, ya que los distintos hilos de ejecuci&oacute;n utilizan el mismo cache, y un cambio realizado por uno estar&iacute;a autom&aacute;ticamente reflejado en el segundo.<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;      El segundo caso es m&aacute;s complejo de analizar, dado que cuando se utilizan caches distribuidos, estos tienen adem&aacute;s de la carga de mantener el cache, la carga de sincronizar sus contenidos con los otros nodos del cluster. Para esto existen diferentes tipos de cach&eacute; distribuidos como son los caches replicados (que copian el contenido del cache entero a todos los nodos), caches repartidos entre los distintos nodos (que implicar&iacute;an el pedido de objetos de un cach&eacute; a otro), o simplemente cach&eacute;s independientes en cada nodo, que sincronicen su contenido en periodos de tiempo definidos.<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;      El &uacute;ltimo de los casos es el m&aacute;s complejo de todosla regla general a aplicar  a este caso (no estoy muy de acuerdo) es que &ldquo;si no somos due&ntilde;os de los datos, no los pongamos en un cache&rdquo;. Obviamente esta regla no siempre es aplicable. Un ejemplo de estos casos son tablas de referencia que todos los sistemas tienen: pa&iacute;ses por ejemplo, que &ldquo;nunca&rdquo; cambian. Se puede tomar el compromiso de cachearlas, y en caso de que los registros se modifiquen &ldquo;por atr&aacute;s&rdquo;, la aplicaci&oacute;n que utilice el cach&eacute; provea alguna funcionalidad que limpie el cach&eacute; de las instancias correspondientes.<br>

        <p><strong>Cache de primer nivel</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;        Aunque parezca un poco confuso, la cach&eacute; de primer nivel de Hibernate no es ni m&aacute;s ni menos que la Session. Esta cach&eacute; de primer nivel guarda todos los objetos y operaciones que vamos realizando durante nuestra Session con el motor de persistencia. Cada load o query que hacemos a la Session, le permite cachear los objetos recuperados. A su vez cada save, update, saveOrupdate, delete, etc. tambi&eacute;n es almacenado en la Session y no es realizado hasta que no se hace un commit o flush (este tema en realidad es bastante m&aacute;s complejo de analizar, ya que no siempre se espera hasta finalizar una Session para realizar las operaciones).<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;        La Session provee m&eacute;todos expl&iacute;citos para el tratamiento de la cach&eacute;, como son  evict y  clear, que eliminan un objeto de la cach&eacute; de primer nivel y la limpian, respectivamente.<br><br>

&nbsp;&nbsp;&nbsp;&nbsp;        El comportamiento de la cache de primer nivel de Hibernate est&aacute; directamente ligado con el modelo de gesti&oacute;n de sesiones que elijamos  para nuestra aplicaci&oacute;n:<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;- Session global: Existe una sola Session para toda la aplicaci&oacute;n.<br>
La m&aacute;s simple de todas, pero obviamente poco escalable. A su vez la que mejor uso hace del cache de primer nivel.<br><br>

&nbsp;&nbsp;&nbsp;&nbsp; - Session por usuario o aplicaci&oacute;n: Cada usuario tiene asociada una Session durante todo el uso de la aplicaci&oacute;n. <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp; Es tambi&eacute;n bastante simple, y el cach&eacute; de primer nivel es de mucha utilidad para cada usuario, ganando velocidad en las operaciones habituales de cada usuario o aplicaci&oacute;n. Va en contra del concepto de &ldquo;sessiones cortas&rdquo; (mantener la sesion abierta el menor tiempo posible, generalmente lo mas recomendado), y ac&aacute; comienzan los problemas de acceso concurrente.<br>
<br>
  &nbsp;&nbsp;&nbsp;&nbsp; -       Session por unidad de trabajo: cada unidad de trabajo requiere una nueva Session. <br>
  <br>
    &nbsp;&nbsp;&nbsp;&nbsp; -   Primero, hay que aclarar que no es lo mismo &ldquo;Session&rdquo; que &quot;operaci&oacute;n&quot;. Cada unidad de trabajo consta de varias operaciones, no solo una. Es la que ofrece mayor escalabilidad, y mayor tolerancia a fallos. Las conexiones son retornadas al pool en intervalos cortos de tiempo ya que las transacciones son cortas. Esta soluci&oacute;n no aprovecha NADA el cach&eacute; de primer nivel. Es por esto que  surge el&hellip;.</p>
      <p><strong>Cache de segundo nivel</strong><br>
        &nbsp;&nbsp;&nbsp;&nbsp; El principal problema del cach&eacute; de primer nivel es que su eficiencia est&aacute; limitada a que varios &ldquo;usuarios&rdquo; (o sistemas) utilicen la misma Session al mismo tiempo. Por esto surge la necesidad de contar con un cach&eacute; a un nivel m&aacute;s alto: el segundo nivel de cach&eacute;.<br>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp; El primer nivel se sit&uacute;a al nivel de Session y el segundo nivel de cach&eacute; al nivel de SessionFactory.<br>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp; Este cach&eacute; se hace cargo de todos los fallos producidos por el cach&eacute; de primer nivel, esto adem&aacute;s permite que desaparezcan los problemas de modificaci&oacute;n de datos concurrentes en diferentes sesiones (uno de los problemas planteados), dado que el segundo nivel trabaja con &ldquo;todos&rdquo; los objetos recuperados y manejados por todas las sesiones. Entonces, ahora, cuando un objeto no se encuentra en el cache de primer nivel (la session) Hibernate lo buscar&aacute; en el cach&eacute; de segundo nivel (si es que esta correctamente configurado). De esta forma nos podemos ahorrar muchos (y realmente son muchos) 
        accesos a la base de datos.
        <p class="centro"><img src="20071024/imagen2.png"></p> <br>
&nbsp;&nbsp;&nbsp;&nbsp;         Hay que tener en cuenta una serie de precauciones al momento de decidirse por el uso de un cach&eacute; de segundo nivel. El problema m&aacute;s importante se presenta con los cach&eacute; distribuidos (en clusters o no), y uno m&aacute;s simple y cercano es que no todos los objetos se ver&aacute;n beneficiados por el uso de un cach&eacute; de segundo nivel, dependiendo del tipo de operaci&oacute;n que se realice con cada uno y su configuraci&oacute;n en el motor de cache utilizado. <br>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp; Por norma, se recomienda guardar en cach&eacute; datos que no cambien con frecuencia, pero esto tambi&eacute;n tiene algunas excepciones, como son los datos hist&oacute;ricos (&iquest;qu&eacute; sentido tiene cachear informaci&oacute;n de hace 3 a&ntilde;os si no es accedida muy frecuentemente, teniendo  en  cuenta  el  costo  que supone mantener el cach&eacute; con esta informaci&oacute;n?).<br>
        <br>
      &nbsp;&nbsp;&nbsp;&nbsp; Luego de decidir el uso de un cache de segundo nivel, se debe determinar que entidades  se  ver&aacute;n beneficiadas con &eacute;ste e inmediatamente despu&eacute;s de esto se debe configurar la estrategia de acceso concurrente para cada una de estas entidades. Hibernate dispone de 4 estrategias de acceso concurrente predefinidas (que pueden ser ampliadas):<br>
      <br>
         &nbsp;&nbsp;&nbsp;&nbsp; 1.Transactional: es el m&aacute;s estricto y garantiza que los datos no est&eacute;n desfasados. Solo utilizable en clusters.<br>        &nbsp;&nbsp;&nbsp; 2.Read-write: idem al anterior, pero para ambientes monol&iacute;ticos, no puede ser utilizado en clusters.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 3.Nonstric read-write: no ofrece garant&iacute;as de sincronizaci&oacute;n entre cache y BD, la sincronizaci&oacute;n se realiza por medio de timeouts.  Ideal para datos no demasiado cr&iacute;ticos.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 4.Read-only: La menos estricta de todas, ideal para datos de solo lectura.<br>
        <br>
      &nbsp;&nbsp;&nbsp;&nbsp; Los cach&eacute;s pueden aumentar enormemente el rendimiento de muchos sistemas, sin embargo estos no est&aacute;n exentos de problemas, y muchas veces estos problemas pueden ser m&aacute;s costosos que la ganancia obtenida por la utilizaci&oacute;n del cach&eacute;. La actualizaci&oacute;n concurrente, la elecci&oacute;n de estrategias de acceso, el proveedor de cache, la configuraci&oacute;n de cluster, el cache de consultas, los batch sizes,  joins maximos, etc., son par&aacute;metros y decisiones que llevan mucho tiempo y an&aacute;lisis, pero que garantizan que luego de realizadas y superadas nuestro sistema tendr&aacute; grandes oportunidades de comportamiento eficiente.</p>
        <br></td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td width="386">&nbsp;</td>
    <td></td>
  </tr>
  <tr>
    <td colspan="2" valign="top"><div align="left">
            <p>&nbsp;</p>
            <p><a href="../feed.xml" target="_blank">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img border=0 src="../imagenes/rss.png"></a></p>
          </div></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td></td>
  </tr>
  <tr>
    <td colspan="4" valign="top" class="menu_pie"><a href="about_us.htm" target="_self"> sobre nosotros</a> <span class="secciones">| <a href="research.htm" target="_self">investigaci&oacute;n</a> |</span> <a href="publications.htm" target="_self">publicaciones</a> <span class="secciones">|</span> <a href="technology.htm" target="_self">transferencia de t.</a> <span class="secciones">|</span> <a href="capabilities.htm" target="_self">capacidades</a> </td>
  </tr>
  <tr>
    <td colspan="6" valign="bottom" nowrap><img src="../imagenes/barra_down.gif" width="830" height="43" border="0" usemap="#Map"></td>
  </tr>
</table>
<map name="Map">
  <area shape="rect" coords="609,-31,743,22" href="http://www.amplioespectro.com" target="_blank">
</map>
</body>
</html>

<!-- Localized -->