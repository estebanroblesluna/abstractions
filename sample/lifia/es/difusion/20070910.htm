<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Lifia</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="shortcut icon" href="../../imagenes/lifiaicon.ico" >
<style type="text/css">
<!--
@import url("../estilos_lifia.css");
body {
	background-color: #bec2d1;
	margin-left: 0px;
	margin-top: 5px;
	margin-right: 0px;
	margin-bottom: 0px;
	background-image: url();
}
a:link {
	color: #255282;
	text-decoration: none;
}
a:visited {
	text-decoration: none;
	color: #255282;
}
a:hover {
	text-decoration: none;
	color: #FF9933;
}
a:active {
	text-decoration: none;
	color: #FF9933;
}
.Estilo4 {color: #666666}
.Estilo8 {color: #1EA173}
.Estilo9 {color: #333399}

.centro{FONT-SIZE: 13px; COLOR: #666666; font-weight:bold;FONT-FAMILY: "Trebuchet MS", Verdana;
text-align:center;}
.linkTexto {
		COLOR: #0033CC; 	text-decoration:underline;
		font-weight:bold;}
-->
</style>
</head>

<body>
<table width="830" border="0" align="center" cellpadding="0" cellspacing="0" background="../imagenes/line_830.gif">
  <!--DWLayoutTable-->
  <tr>
    <td width="30" rowspan="8" valign="top"><img src="../imagenes/spacer_izq2.gif" width="30" height="615"></td>
    <td colspan="4" valign="top"><table width="780" height="114" border="0" cellpadding="0" cellspacing="0">
        <!--DWLayoutTable-->
        <tr>
          <td width="780" height="170" valign="top"><img src="../imagenes/top_difusion.gif" width="780" height="172" border="0" usemap="#Map"></td>
        </tr>
    </table></td>
  <td width="20" rowspan="8" valign="top"><img src="../imagenes/spacer_der2.gif" width="20" height="485"></td>
  </tr>
  <tr>
    <td width="247" rowspan="5" valign="top"><table width="247" border="0" cellpadding="0" cellspacing="0">
        <!--DWLayoutTable-->
        <tr>
          <td height="19" colspan="3" valign="top"><img src="../imagenes/spacer_vert_19.gif" width="10" height="19"></td>
        </tr>
        <tr>
          <td width="41" rowspan="7" valign="top"><!--DWLayoutEmptyCell-->&nbsp;</td>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../index.htm" target="_self">Bienvenida</a></td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../about_us.htm" target="_self">Sobre nosotros</a> </td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../research.htm">Investigaci&oacute;n</a> </td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap><span class="menu_izq"> <a href="../publications.htm" target="_self">Publicaciones </a></span> &#13;</td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" nowrap class="menu_izq"><a href="../technology.htm" target="_self">Transferencia de tec. &amp; servicios </a>&#13;</td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top" class="menu_izq"><span class="menu_izq Estilo8"> <a href="../capabilities.htm">Capacidades &#13;</a><strong> <a href="capabilities.htm">&#13;&#13;</a></strong></span> &#13;</td>
        </tr>
        <tr>
          <td height="19" colspan="2" valign="top"><a href="../difusion.htm" class="menu_izq"><strong>Difusi&oacute;n</strong></a></td>
        </tr>
        <tr>
          <td height="57">&nbsp;</td>
          <td width="84">&nbsp;</td>
          <td width="122">&nbsp;</td>
        </tr>
        <tr>
          <td height="84" colspan="3" valign="top"><img src="../imagenes/spacer_vert_84.gif" width="10" height="84"></td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita Estilo4"><a href="../sitemap.htm" target="_self">mapa del sitio</a> </div></td>
              <td rowspan="5" valign="top"><!--DWLayoutEmptyCell-->&nbsp;</td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita"><a href="../staff.htm" target="_self">staff</a></div></td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita Estilo4"><a href="../contact.htm" target="_self">contacto</a></div></td>
        </tr>
        <tr>
          <td height="16" colspan="2" valign="top"><div align="center" class="menu_negrita Estilo4"><a href="../../en/index.htm" target="_self">english version</a> </div></td>
        </tr>
        <tr>
          <td height="16"></td>
          <td></td>
        </tr>
		        <tr>
		          <td>&nbsp;</td>
                  <td>&nbsp;</td>
                  <td>&nbsp;</td>
        </tr>
		
                </table></td>
    <td width="40"></td>
    <td valign="top"><!--DWLayoutEmptyCell-->&nbsp;</td>
        <td width="107"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td valign="top" class="titulo_principal_cap Estilo9"><span class="titulo_principal_gen">Spring scheduling </span><br></td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td valign="top" class="titulo_secundario"> (por Santiago Urrizola) -  10/Septiembre/2007 - <a href="20070910.htm"><strong>Permalink</strong></a> </td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td valign="top" class="parrafo_normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; En aplicaciones donde muchas de las tareas son automáticas (y no disparadas por la acción de un usuario) es indispensable la utilización de procesos. Anteriormente se recurría a envío de mensajes asincrónicos (JMS por ejemplo) desde algún otro proceso con un CRON de LINUX para la ejecución de los procesos dentro de la aplicación. Con la aparición de frameworks como Timer y Quartz, junto con la integración transparente que provee Spring, la definición entera de los procesos queda dentro del scope de la aplicación.
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring dispone de soporte para realizar tareas de scheduling y Thread pooling integrando con Timer (parte de la especificación de la JDK desde la versión 1.3) y el framework Quartz (<a href="http://www.opensymphony.com/quartz/">http://www.opensymphony.com/quartz/</a>). La definición de procesos de scheduling es muy similar a la definición de otro tipo de componentes. Básicamente, consta en definir un FactoryBean con referencias hacia Timer (si es que se utiliza Timer de la JDK)  o a TriggerIinstaces   (si es que se utiliza Quartz). Esta forma de implementación requiere que se extiendan clases de Timer o de Quartz, lo cual introduce una dependencia muchas veces no deseada.       </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pero existe otra manera de configurar jobs y es utilizando proxys que permite la invocación de métodos en un target object (el proceso), esto es utilizando el MethodInvokingFactoryBean.        </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;El siguiente es un ejemplo extraído del proyecto PLAN-JOS. En él,  utilizamos listener para leer mensajes provenientes de otros sistemas, 3 de estos sistemas envían mensajes a PLAN-JOS por medio de archivos guardados en el sistema de archivos del servidor. Para esto definimos un proceso que lee periódicamente distintos directorios y procesar los mensajes.        </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Definición del target object (objeto que implementa el proceso).</p>
      <p>&lt;bean id=&quot;input-fax-listener&quot; <br>
      class=&quot;eu.europa.planjos.server.in.listener.DirectoryFileListener&quot;&gt;<br>
   &nbsp;&nbsp;&nbsp;    &nbsp; &lt;property name=&quot;directory&quot;<br>
        value=&quot;${environment}/${wood.directory}/${fax.in.directory}&quot;/&gt;<br>
&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=&quot;inputChannel&quot; value=&quot;fax&quot;/&gt;<br>
&nbsp; &nbsp;&nbsp;&nbsp;  &lt;property name=&quot;fileExtension&quot; value=&quot;zip&quot;/&gt;<br>
&nbsp; &nbsp; &nbsp;  &lt;property name=&quot;filePackageProcessor&quot;  ref=&quot;file-processor-fax&quot;/&gt; <br>
 &nbsp; &nbsp; &nbsp;  &lt;property name=&quot;filePackagePostProcessor&quot;  <br>
      ref=&quot;file-post-processor&quot;/&gt; <br>
      &lt;/bean&gt;</p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;En nuestro caso, la implementación de los procesos son clases POJOs, es decir que no implementan ningún  interfaz   ni  extienden  ninguna  clase  tanto  de  spring  como  de  Timer  o  Quartz.  Tenemos aproximadamente 15  procesos simples de estas características.      </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Luego de esto, es necesario definir el job. Este bean es el que determina cuál es el método que se va a ejecutar de cada proceso (target object) una vez que se realice el trigger del proceso.</p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean id=&quot;input-fax-jobDetail&quot;<br>
     	class=&quot;org.springframework.scheduling.quartz.MethodInvoking<br>
        JobDetailFactoryBean&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=&quot;targetObject&quot; ref=&quot;input-fax-listener&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;targetMethod&quot; value=&quot;listen&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;concurrent&quot; value=&quot;false&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/bean&gt;</p>
      <p>
        <bean id="input-fax-jobDetail" 	class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
          <property name="targetObject" ref="input-fax-listener"/>
          <property name="targetMethod" value="listen"/>
          <property name="concurrent" value="false"/>            </bean>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;En este bean se definen propiedades como: el nombre del método que se quiere ejecutar y si el proceso puede ejecutarse concurrentemente (es decir si pueden existir dos instancias del proceso corriendo concurrentemente).      </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;En este punto se tienen definidos el proceso, y la ejecución del proceso, sólo queda definir cuando se quiere ejecutar el proceso (cada cuanto tiempo, con que periodicidad, etc). Para esto nosotros definimos un trigger abstracto, utilizado para determinar las propiedades de ejecución de procesos similares (en este caso algunos procesos de escucha de mensajes en el sistema de archivos).
        &nbsp;</p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean id=&quot;abstract-input-trigger&quot;<br>
 			        class=&quot;org.springframework.scheduling.quartz.SimpleTrigger
              Bean&quot;
              abstract=&quot;true&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;startDelay&quot; value=&quot;5000&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;repeatInterval&quot; value=&quot;5000&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/bean&gt;</p>
      <p>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Este bean define que los triggers que  controle se comenzarán a ejecutar 5 segundos después de que la aplicación arranque, y cada 5 segundos luego de terminar la ejecución de cada proceso. Luego, se define un trigger por cada uno de los procesos.      </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean id=&quot;input-fax-trigger&quot; parent=&quot;abstract-input-trigger&quot; 
        class=&quot;org.springframework.<br>
        scheduling.quartz.SimpleTriggerBean&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=&quot;jobDetail&quot; ref=&quot;input-fax-jobDetail&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/bean&gt;
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;También se podrían definir 2 triggers para el mismo jobdetails. Esto significa que se puede tener una sola definición de proceso, y ejecutar esta en varios momentos distintos con intervalos distintos y delays distintos.</p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring ofrece dos posibilidades para definir triggers:Simple y Cron. Con la sublclase SimpleTriggerBean se especifican los intervalos de ejecución como se vio en el ejemplo anterior. Con la subclase CronTriggerBean, se utiliza la sintaxis cron para la definición de los procesos. Por ejemplo: </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean id=&quot;input-fax-trigger&quot; parent=&quot;abstract-input-trigger&quot;<br>
              class=&quot;org.springframework.scheduling.quartz.SimpleTriggerBean&rdquo;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;jobDetail&quot; ref=&quot;input-fax-jobDetail&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;cronExpression&quot; ref=&quot;0 30 4 * * ?&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/bean&gt;</p>
    

      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Este trigger se ejecuta todas las mañanas a las 4:30. Y para finalizar, se define el controlador de todos los procesos, es decir, el contenedor que ejecutará cada uno  de los procesos cuando corresponda:
        <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
            <property name="triggers">
              <list>
                <ref bean="input-fax-trigger"/>
                <ref bean="input-email-trigger"/> 
                <ref bean="input-simap-trigger"/>
                <ref bean="input-esender-trigger"/>
                <ref bean="input-esender-webservice-trigger"/>
                <ref bean="input-ack-trigger"/>
                <ref bean="input-ack-letter-simap-trigger"/>
                <ref bean="input-esc-1-trigger"/>
                <ref bean="input-esc-2-trigger"/> 
                <ref bean="input-ack-media-provider-trigger"/> 
                <ref bean="input-ack-dgmarkt-trigger"/>
                <ref bean="input-ack-report-trigger"/> 
              </list>
              </property>        </bean>
      </p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=&quot;triggers&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;list&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-fax-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-email-trigger&quot;/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-simap-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-esender-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-esender-webservice-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-ack-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-ack-letter-simap-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-esc-1-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-esc-2-trigger&quot;/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-ack-media-provider-trigger&quot;/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-ack-dgmarkt-trigger&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref bean=&quot;input-ack-report-trigger&quot;/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/list&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</p>
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Además a este controlador se le pueden configurar muchas propiedades como: indicadores de espera  a que terminen de correr todos los procesos para hacer un clean shutdown, listener de ejecución de triggers, un contexto donde se pueden pasar propiedades y valores, etc.</p>
      <p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Una particularidad de estos beans es que pueden ser alterados en runtime, por ejemplo cambiar el cron sintax de un trigger mientras la aplicación está corriendo, o agregar un nuevo trigger (por ende un nuevo proceso) al controlador.      </p>
    </p></td>
    <td></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td width="386">&nbsp;</td>
    <td></td>
  </tr>
  <tr>
    <td colspan="2" valign="top"><div align="left">
            <p>&nbsp;</p>
            <p><a href="../feed.xml" target="_blank">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img border=0 src="../imagenes/rss.png"></a></p>
          </div></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td></td>
  </tr>
  <tr>
    <td colspan="4" valign="top" class="menu_pie"><a href="about_us.htm" target="_self"> sobre nosotros</a> <span class="secciones">| <a href="research.htm" target="_self">investigaci&oacute;n</a> |</span> <a href="publications.htm" target="_self">publicaciones</a> <span class="secciones">|</span> <a href="technology.htm" target="_self">transferencia de t.</a> <span class="secciones">|</span> <a href="capabilities.htm" target="_self">capacidades</a> </td>
  </tr>
  <tr>
    <td colspan="6" valign="bottom" nowrap><img src="../imagenes/barra_down.gif" width="830" height="43" border="0" usemap="#Map"></td>
  </tr>
</table>
<map name="Map">
  <area shape="rect" coords="609,-31,743,22" href="http://www.amplioespectro.com" target="_blank">
</map>
</body>
</html>

<!-- Localized -->